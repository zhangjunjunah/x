{"version":3,"sources":["components/use-x-chat/demo/suggestions.tsx?techStack=react","components/use-x-agent/demo/custom.tsx?techStack=react","components/use-x-chat/demo/stream.tsx?techStack=react","components/use-x-chat/demo/stream-cancel.tsx?techStack=react","components/x-request/demo/basic.tsx?techStack=react","components/use-x-chat/demo/basic.tsx?techStack=react","components/x-request/demo/custom-transformer.tsx?techStack=react","components/x-stream/demo/custom-protocol.tsx?techStack=react","docs/playground/independent.tsx?techStack=react","components/x-stream/demo/default-protocol.tsx?techStack=react","components/use-x-agent/demo/preset.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/x/x/components/use-x-chat/demo/suggestions.tsx?watch=parent';import { SmileOutlined, UserOutlined } from '@ant-design/icons';\nimport { Bubble, Prompts, Sender, useXAgent, useXChat } from '@ant-design/x';\nimport { Flex, type GetProp } from 'antd';\nimport React from 'react';\n\nconst sleep = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\nconst roles: GetProp<typeof Bubble.List, 'roles'> = {\n  user: {\n    placement: 'end',\n    avatar: { icon: <UserOutlined />, style: { background: '#87d068' } },\n  },\n  text: {\n    placement: 'start',\n    avatar: { icon: <UserOutlined />, style: { background: '#fde3cf' } },\n    typing: true,\n  },\n  suggestion: {\n    placement: 'start',\n    avatar: { icon: <UserOutlined />, style: { visibility: 'hidden' } },\n    variant: 'borderless',\n    messageRender: (content) => (\n      <Prompts\n        vertical\n        items={(content as any as string[]).map((text) => ({\n          key: text,\n          icon: <SmileOutlined style={{ color: '#FAAD14' }} />,\n          description: text,\n        }))}\n      />\n    ),\n  },\n};\n\ntype AgentUserMessage = {\n  type: 'user';\n  content: string;\n};\n\ntype AgentAIMessage = {\n  type: 'ai';\n  content?: string;\n  list?: (\n    | {\n        type: 'text';\n        content: string;\n      }\n    | {\n        type: 'suggestion';\n        content: string[];\n      }\n  )[];\n};\n\ntype AgentMessage = AgentUserMessage | AgentAIMessage;\n\ntype BubbleMessage = {\n  role: string;\n};\n\nconst App = () => {\n  const [content, setContent] = React.useState('');\n\n  // Agent for request\n  const [agent] = useXAgent<AgentMessage>({\n    request: async ({ message }, { onSuccess }) => {\n      await sleep();\n\n      const { content } = message || {};\n\n      onSuccess({\n        type: 'ai',\n        list: [\n          {\n            type: 'text',\n            content: `Do you want?`,\n          },\n          {\n            type: 'suggestion',\n            content: [`Look at: ${content}`, `Search: ${content}`, `Try: ${content}`],\n          },\n        ],\n      });\n    },\n  });\n\n  // Chat messages\n  const { onRequest, parsedMessages } = useXChat<AgentMessage, BubbleMessage>({\n    agent,\n\n    defaultMessages: [\n      {\n        id: 'init',\n        message: {\n          type: 'ai',\n          content: 'Hello, what can I do for you?',\n        },\n        status: 'success',\n      },\n    ],\n\n    requestPlaceholder: {\n      type: 'ai',\n      content: 'Waiting...',\n    },\n\n    // Convert AgentMessage to BubbleMessage\n    parser: (agentMessages) => {\n      const list = agentMessages.content ? [agentMessages] : (agentMessages as AgentAIMessage).list;\n\n      return (list || []).map((msg) => ({\n        role: msg.type,\n        content: msg.content,\n      }));\n    },\n  });\n\n  return (\n    <Flex vertical gap=\"middle\">\n      <Bubble.List\n        roles={roles}\n        style={{ maxHeight: 300 }}\n        items={parsedMessages.map(({ id, message, status }) => ({\n          key: id,\n          loading: status === 'loading',\n          ...message,\n        }))}\n      />\n      <Sender\n        loading={agent.isRequesting()}\n        value={content}\n        onChange={setContent}\n        onSubmit={(nextContent) => {\n          onRequest({\n            type: 'user',\n            content: nextContent,\n          });\n          setContent('');\n        }}\n      />\n    </Flex>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/use-x-agent/demo/custom.tsx?watch=parent';import { useXAgent } from '@ant-design/x';\nimport { Button, Divider, Form, Input, Typography } from 'antd';\nimport React from 'react';\n\nconst App = () => {\n  const [lines, setLines] = React.useState<string[]>([]);\n\n  const [form] = Form.useForm();\n\n  const log = (text: string) => {\n    setLines((ori) => [...ori, text]);\n  };\n\n  const [agent] = useXAgent({\n    request: ({ message }, { onUpdate, onSuccess }) => {\n      let times = 0;\n\n      const id = setInterval(() => {\n        times += 1;\n        onUpdate(`Thinking...(${times}/3)`);\n\n        if (times >= 3) {\n          onSuccess(`It's funny that you ask: ${message}`);\n          clearInterval(id);\n        }\n      }, 500);\n    },\n  });\n\n  const onFinish = ({ question }: { question: string }) => {\n    log(`[You] Ask: ${question}`);\n    agent.request(\n      { message: question },\n      {\n        onUpdate: (message) => {\n          log(`[Agent] Update: ${message}`);\n        },\n        onSuccess: (message) => {\n          log(`[Agent] Answer: ${message}`);\n          form.setFieldsValue({ question: '' });\n        },\n        // Current demo not use error\n        onError: () => {},\n      },\n    );\n  };\n\n  return (\n    <>\n      <Form form={form} layout=\"vertical\" onFinish={onFinish} autoComplete=\"off\">\n        <Form.Item label=\"Question\" name=\"question\">\n          <Input />\n        </Form.Item>\n        <Button htmlType=\"submit\" type=\"primary\" loading={agent.isRequesting()}>\n          submit\n        </Button>\n      </Form>\n\n      <Divider />\n\n      <Typography>\n        <ul>\n          {lines.map((line, index) => (\n            <li key={index}>{line}</li>\n          ))}\n        </ul>\n      </Typography>\n    </>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/use-x-chat/demo/stream.tsx?watch=parent';import { UserOutlined } from '@ant-design/icons';\nimport { Bubble, Sender, useXAgent, useXChat } from '@ant-design/x';\nimport { Flex, type GetProp } from 'antd';\nimport React from 'react';\n\nconst roles: GetProp<typeof Bubble.List, 'roles'> = {\n  ai: {\n    placement: 'start',\n    avatar: { icon: <UserOutlined />, style: { background: '#fde3cf' } },\n  },\n  local: {\n    placement: 'end',\n    avatar: { icon: <UserOutlined />, style: { background: '#87d068' } },\n  },\n};\n\nconst App = () => {\n  const [content, setContent] = React.useState('');\n\n  // Agent for request\n  const [agent] = useXAgent({\n    request: async ({ message }, { onSuccess, onUpdate }) => {\n      const fullContent = `Streaming output instead of Bubble typing effect. You typed: ${message}`;\n      let currentContent = '';\n\n      const id = setInterval(() => {\n        currentContent = fullContent.slice(0, currentContent.length + 2);\n        onUpdate(currentContent);\n\n        if (currentContent === fullContent) {\n          clearInterval(id);\n          onSuccess(fullContent);\n        }\n      }, 100);\n    },\n  });\n\n  // Chat messages\n  const { onRequest, messages } = useXChat({\n    agent,\n  });\n\n  return (\n    <Flex vertical gap=\"middle\">\n      <Bubble.List\n        roles={roles}\n        style={{ maxHeight: 300 }}\n        items={messages.map(({ id, message, status }) => ({\n          key: id,\n          role: status === 'local' ? 'local' : 'ai',\n          content: message,\n        }))}\n      />\n      <Sender\n        loading={agent.isRequesting()}\n        value={content}\n        onChange={setContent}\n        onSubmit={(nextContent) => {\n          onRequest(nextContent);\n          setContent('');\n        }}\n      />\n    </Flex>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/use-x-chat/demo/stream-cancel.tsx?watch=parent';import { UserOutlined } from '@ant-design/icons';\nimport { Bubble, Sender, XStream, useXAgent, useXChat } from '@ant-design/x';\nimport { Flex, type GetProp } from 'antd';\nimport React, { useEffect, useRef } from 'react';\n\nconst roles: GetProp<typeof Bubble.List, 'roles'> = {\n  ai: {\n    placement: 'start',\n    avatar: { icon: <UserOutlined />, style: { background: '#fde3cf' } },\n  },\n  local: {\n    placement: 'end',\n    avatar: { icon: <UserOutlined />, style: { background: '#87d068' } },\n  },\n};\n\nconst contentChunks = [\n  'He',\n  'llo',\n  ', w',\n  'or',\n  'ld!',\n  ' Ant',\n  ' Design',\n  ' X',\n  ' is',\n  ' the',\n  ' best',\n  '!',\n];\n\nfunction mockReadableStream() {\n  const sseChunks: string[] = [];\n\n  for (let i = 0; i < contentChunks.length; i++) {\n    const sseEventPart = `event: message\\ndata: {\"id\":\"${i}\",\"content\":\"${contentChunks[i]}\"}\\n\\n`;\n    sseChunks.push(sseEventPart);\n  }\n\n  return new ReadableStream({\n    async start(controller) {\n      for (const chunk of sseChunks) {\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        controller.enqueue(new TextEncoder().encode(chunk));\n      }\n      controller.close();\n    },\n  });\n}\n\nconst App = () => {\n  const [content, setContent] = React.useState('');\n\n  const abortRef = useRef(() => {});\n\n  useEffect(() => {\n    return () => {\n      abortRef.current();\n    };\n  }, []);\n\n  // Agent for request\n  const [agent] = useXAgent({\n    request: async (_, { onSuccess, onUpdate }) => {\n      const stream = XStream({\n        readableStream: mockReadableStream(),\n      });\n\n      const reader = stream.getReader();\n      abortRef.current = () => {\n        reader?.cancel();\n      };\n\n      let current = '';\n      while (reader) {\n        const { value, done } = await reader.read();\n        if (done) {\n          onSuccess(current);\n          break;\n        }\n        if (!value) continue;\n        const data = JSON.parse(value.data);\n        current += data.content || '';\n        onUpdate(current);\n      }\n    },\n  });\n\n  // Chat messages\n  const { onRequest, messages } = useXChat({\n    agent,\n  });\n\n  return (\n    <Flex vertical gap=\"middle\">\n      <Bubble.List\n        roles={roles}\n        style={{ maxHeight: 300 }}\n        items={messages.map(({ id, message, status }) => ({\n          key: id,\n          role: status === 'local' ? 'local' : 'ai',\n          content: message,\n        }))}\n      />\n      <Sender\n        loading={agent.isRequesting()}\n        value={content}\n        onChange={setContent}\n        onSubmit={(nextContent) => {\n          onRequest(nextContent);\n          setContent('');\n        }}\n        onCancel={() => abortRef.current()}\n      />\n    </Flex>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/x-request/demo/basic.tsx?watch=parent';import { LoadingOutlined, TagsOutlined } from '@ant-design/icons';\nimport { ThoughtChain, XRequest } from '@ant-design/x';\nimport { Button, Descriptions, Splitter } from 'antd';\nimport React from 'react';\n\nimport type { ThoughtChainItem } from '@ant-design/x';\n\n/**\n * 🔔 Please replace the BASE_URL, PATH, MODEL, API_KEY with your own values.\n */\nconst BASE_URL = 'https://api.example.com';\nconst PATH = '/chat';\nconst MODEL = 'gpt-3.5-turbo';\n// const API_KEY = '';\n\nconst exampleRequest = XRequest({\n  baseURL: BASE_URL + PATH,\n  model: MODEL,\n\n  /** 🔥🔥 Its dangerously! */\n  // dangerouslyApiKey: API_KEY\n});\n\nconst App = () => {\n  const [status, setStatus] = React.useState<ThoughtChainItem['status']>();\n  const [lines, setLines] = React.useState<Record<string, string>[]>([]);\n\n  async function request() {\n    setStatus('pending');\n\n    await exampleRequest.create(\n      {\n        messages: [{ role: 'user', content: 'hello, who are u?' }],\n        stream: true,\n      },\n      {\n        onSuccess: (messages) => {\n          setStatus('success');\n          console.log('onSuccess', messages);\n        },\n        onError: (error) => {\n          setStatus('error');\n          console.error('onError', error);\n        },\n        onUpdate: (msg) => {\n          setLines((pre) => [...pre, msg]);\n          console.log('onUpdate', msg);\n        },\n      },\n    );\n  }\n\n  return (\n    <Splitter>\n      <Splitter.Panel>\n        <Button type=\"primary\" disabled={status === 'pending'} onClick={request}>\n          Request - {BASE_URL}\n          {PATH}\n        </Button>\n      </Splitter.Panel>\n      <Splitter.Panel style={{ marginLeft: 16 }}>\n        <ThoughtChain\n          items={[\n            {\n              title: 'Request Log',\n              status: status,\n              icon: status === 'pending' ? <LoadingOutlined /> : <TagsOutlined />,\n              description:\n                status === 'error' &&\n                exampleRequest.baseURL === BASE_URL + PATH &&\n                'Please replace the BASE_URL, PATH, MODEL, API_KEY with your own values.',\n              content: (\n                <Descriptions column={1}>\n                  <Descriptions.Item label=\"Status\">{status || '-'}</Descriptions.Item>\n                  <Descriptions.Item label=\"Update Times\">{lines.length}</Descriptions.Item>\n                </Descriptions>\n              ),\n            },\n          ]}\n        />\n      </Splitter.Panel>\n    </Splitter>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/use-x-chat/demo/basic.tsx?watch=parent';import { UserOutlined } from '@ant-design/icons';\nimport { Bubble, Sender, useXAgent, useXChat } from '@ant-design/x';\nimport { Flex, type GetProp } from 'antd';\nimport React from 'react';\n\nconst sleep = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\nconst roles: GetProp<typeof Bubble.List, 'roles'> = {\n  ai: {\n    placement: 'start',\n    avatar: { icon: <UserOutlined />, style: { background: '#fde3cf' } },\n    typing: { step: 5, interval: 20 },\n    style: {\n      maxWidth: 600,\n    },\n  },\n  local: {\n    placement: 'end',\n    avatar: { icon: <UserOutlined />, style: { background: '#87d068' } },\n  },\n};\n\nlet mockSuccess = false;\n\nconst App = () => {\n  const [content, setContent] = React.useState('');\n\n  // Agent for request\n  const [agent] = useXAgent({\n    request: async ({ message }, { onSuccess, onError }) => {\n      await sleep();\n\n      mockSuccess = !mockSuccess;\n\n      if (mockSuccess) {\n        onSuccess(`Mock success return. You said: ${message}`);\n      }\n\n      onError(new Error('Mock request failed'));\n    },\n  });\n\n  // Chat messages\n  const { onRequest, messages } = useXChat({\n    agent,\n    requestPlaceholder: 'Waiting...',\n    requestFallback: 'Mock failed return. Please try again later.',\n  });\n\n  return (\n    <Flex vertical gap=\"middle\">\n      <Bubble.List\n        roles={roles}\n        style={{ maxHeight: 300 }}\n        items={messages.map(({ id, message, status }) => ({\n          key: id,\n          loading: status === 'loading',\n          role: status === 'local' ? 'local' : 'ai',\n          content: message,\n        }))}\n      />\n      <Sender\n        loading={agent.isRequesting()}\n        value={content}\n        onChange={setContent}\n        onSubmit={(nextContent) => {\n          onRequest(nextContent);\n          setContent('');\n        }}\n      />\n    </Flex>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/x-request/demo/custom-transformer.tsx?watch=parent';import { ThoughtChain, XRequest } from '@ant-design/x';\nimport { Button, Splitter } from 'antd';\nimport React from 'react';\n\nimport { TagsOutlined } from '@ant-design/icons';\nimport type { ThoughtChainItem } from '@ant-design/x';\n\nconst BASE_URL = 'https://api.example.host';\nconst PATH = '/chat';\nconst MODEL = 'gpt-4o';\n\nconst ND_JSON_SEPARATOR = '\\n';\n\nasync function mockFetch() {\n  const ndJsonData = `{data:{\"id\":\"0\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\",\"role\":\"assistant\"}}],\"created\":1733129200,\"model\":\"gpt-4o\"}}\n{data:{\"id\":\"1\",\"choices\":[{\"index\":1,\"delta\":{\"content\":\"world!\",\"role\":\"assistant\"}}],\"created\":1733129300,\"model\":\"gpt-4o\"}}\n{data:{\"id\":\"2\",\"choices\":[{\"index\":2,\"delta\":{\"content\":\"I\",\"role\":\"assistant\"}}],\"created\":1733129400,\"model\":\"gpt-4o\"}}\n{data:{\"id\":\"3\",\"choices\":[{\"index\":3,\"delta\":{\"content\":\"am\",\"role\":\"assistant\"}}],\"created\":1733129500,\"model\":\"gpt-4o\"}}\n{data:{\"id\":\"4\",\"choices\":[{\"index\":4,\"delta\":{\"content\":\"Ant Design X!\",\"role\":\"assistant\"}}],\"created\":1733129600,\"model\":\"gpt-4o\"}}`;\n\n  const chunks = ndJsonData.split(ND_JSON_SEPARATOR);\n\n  const response = new Response(\n    new ReadableStream({\n      async start(controller) {\n        for (const chunk of chunks) {\n          await new Promise((resolve) => setTimeout(resolve, 100));\n          controller.enqueue(new TextEncoder().encode(chunk));\n        }\n        controller.close();\n      },\n    }),\n    {\n      headers: {\n        'Content-Type': 'application/x-ndjson',\n      },\n    },\n  );\n\n  return response;\n}\n\nconst exampleRequest = XRequest({\n  baseURL: BASE_URL + PATH,\n  model: MODEL,\n  fetch: mockFetch,\n});\n\nconst App = () => {\n  const [status, setStatus] = React.useState<ThoughtChainItem['status']>();\n  const [lines, setLines] = React.useState<string[]>([]);\n\n  async function request() {\n    setStatus('pending');\n\n    await exampleRequest.create(\n      {\n        messages: [{ role: 'user', content: 'hello, who are u?' }],\n        stream: true,\n      },\n      {\n        onSuccess: (messages) => {\n          setStatus('success');\n          console.log('onSuccess', messages);\n        },\n        onError: (error) => {\n          setStatus('error');\n          console.error('onError', error);\n        },\n        onUpdate: (msg) => {\n          setLines((pre) => [...pre, msg]);\n          console.log('onUpdate', msg);\n        },\n      },\n      new TransformStream<string, string>({\n        transform(chunk, controller) {\n          controller.enqueue(chunk);\n        },\n      }),\n    );\n  }\n\n  return (\n    <Splitter>\n      <Splitter.Panel>\n        <Button type=\"primary\" disabled={status === 'pending'} onClick={request}>\n          Request - {BASE_URL}\n          {PATH}\n        </Button>\n      </Splitter.Panel>\n      <Splitter.Panel style={{ marginLeft: 16 }}>\n        <ThoughtChain\n          items={[\n            {\n              title: 'Mock Custom Protocol - Log',\n              status: status,\n              icon: <TagsOutlined />,\n              content: (\n                <pre style={{ overflow: 'scroll' }}>\n                  <code>{lines.join(ND_JSON_SEPARATOR)}</code>\n                </pre>\n              ),\n            },\n          ]}\n        />\n      </Splitter.Panel>\n    </Splitter>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/x-stream/demo/custom-protocol.tsx?watch=parent';import { TagsOutlined } from '@ant-design/icons';\nimport { ThoughtChain, XStream } from '@ant-design/x';\nimport { Button, Splitter } from 'antd';\nimport React from 'react';\n\nconst sipHeaders = [\n  'INVITE sip:[email protected] SIP/2.0\\n',\n  'Via: SIP/2.0/UDP [host];branch=123456\\n',\n  'Content-Type: application/sdp\\n\\n',\n];\n\nconst sdp = [\n  'v=0\\n',\n  'o=alice 2890844526 2890844526 IN IP4 [host]\\n',\n  's=\\n',\n  'c=IN IP4 [host]\\n',\n  't=0 0\\n',\n  'm=audio 49170 RTP/AVP 0\\n',\n  'a=rtpmap:0 PCMU/8000\\n',\n  'm=video 51372 RTP/AVP 31\\n',\n  'a=rtpmap:31 H261/90000\\n',\n  'm=video 53000 RTP/AVP 32\\n',\n  'a=rtpmap:32 MPV/90000\\n\\n',\n];\n\nfunction mockReadableStream() {\n  return new ReadableStream({\n    async start(controller) {\n      for (const chunk of sipHeaders.concat(sdp)) {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        controller.enqueue(new TextEncoder().encode(chunk));\n      }\n      controller.close();\n    },\n  });\n}\n\nconst App = () => {\n  const [lines, setLines] = React.useState<string[]>([]);\n\n  async function readStream() {\n    // 🌟 Read the stream\n    for await (const chunk of XStream({\n      readableStream: mockReadableStream(),\n      transformStream: new TransformStream<string, string>({\n        transform(chunk, controller) {\n          controller.enqueue(chunk);\n        },\n      }),\n    })) {\n      setLines((pre) => [...pre, chunk]);\n    }\n  }\n\n  return (\n    <Splitter>\n      <Splitter.Panel>\n        <Button type=\"primary\" onClick={readStream} style={{ marginBottom: 16 }}>\n          Mock Custom Protocol - SIP\n        </Button>\n      </Splitter.Panel>\n      {/* -------------- Log -------------- */}\n      <Splitter.Panel style={{ marginLeft: 16 }}>\n        <ThoughtChain\n          items={\n            lines.length\n              ? [\n                  {\n                    title: 'Mock Custom Protocol - Log',\n                    status: 'success',\n                    icon: <TagsOutlined />,\n                    content: (\n                      <pre style={{ overflow: 'scroll' }}>\n                        <code>{lines.join('')}</code>\n                      </pre>\n                    ),\n                  },\n                ]\n              : []\n          }\n        />\n      </Splitter.Panel>\n    </Splitter>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/docs/playground/independent.tsx?watch=parent';import {\n  Attachments,\n  Bubble,\n  Conversations,\n  Prompts,\n  Sender,\n  Welcome,\n  useXAgent,\n  useXChat,\n} from '@ant-design/x';\nimport { createStyles } from 'antd-style';\nimport React, { useEffect } from 'react';\n\nimport {\n  CloudUploadOutlined,\n  CommentOutlined,\n  EllipsisOutlined,\n  FireOutlined,\n  HeartOutlined,\n  PaperClipOutlined,\n  PlusOutlined,\n  ReadOutlined,\n  ShareAltOutlined,\n  SmileOutlined,\n} from '@ant-design/icons';\nimport { Badge, Button, type GetProp, Space } from 'antd';\n\nconst renderTitle = (icon: React.ReactElement, title: string) => (\n  <Space align=\"start\">\n    {icon}\n    <span>{title}</span>\n  </Space>\n);\n\nconst defaultConversationsItems = [\n  {\n    key: '0',\n    label: 'What is Ant Design X?',\n  },\n];\n\nconst useStyle = createStyles(({ token, css }) => {\n  return {\n    layout: css`\n      width: 100%;\n      min-width: 1000px;\n      height: 722px;\n      border-radius: ${token.borderRadius}px;\n      display: flex;\n      background: ${token.colorBgContainer};\n      font-family: AlibabaPuHuiTi, ${token.fontFamily}, sans-serif;\n\n      .ant-prompts {\n        color: ${token.colorText};\n      }\n    `,\n    menu: css`\n      background: ${token.colorBgLayout}80;\n      width: 280px;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    conversations: css`\n      padding: 0 12px;\n      flex: 1;\n      overflow-y: auto;\n    `,\n    chat: css`\n      height: 100%;\n      width: 100%;\n      max-width: 700px;\n      margin: 0 auto;\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: column;\n      padding: ${token.paddingLG}px;\n      gap: 16px;\n    `,\n    messages: css`\n      flex: 1;\n    `,\n    placeholder: css`\n      padding-top: 32px;\n    `,\n    sender: css`\n      box-shadow: ${token.boxShadow};\n    `,\n    logo: css`\n      display: flex;\n      height: 72px;\n      align-items: center;\n      justify-content: start;\n      padding: 0 24px;\n      box-sizing: border-box;\n\n      img {\n        width: 24px;\n        height: 24px;\n        display: inline-block;\n      }\n\n      span {\n        display: inline-block;\n        margin: 0 8px;\n        font-weight: bold;\n        color: ${token.colorText};\n        font-size: 16px;\n      }\n    `,\n    addBtn: css`\n      background: #1677ff0f;\n      border: 1px solid #1677ff34;\n      width: calc(100% - 24px);\n      margin: 0 12px 24px 12px;\n    `,\n  };\n});\n\nconst placeholderPromptsItems: GetProp<typeof Prompts, 'items'> = [\n  {\n    key: '1',\n    label: renderTitle(<FireOutlined style={{ color: '#FF4D4F' }} />, 'Hot Topics'),\n    description: 'What are you interested in?',\n    children: [\n      {\n        key: '1-1',\n        description: `What's new in X?`,\n      },\n      {\n        key: '1-2',\n        description: `What's AGI?`,\n      },\n      {\n        key: '1-3',\n        description: `Where is the doc?`,\n      },\n    ],\n  },\n  {\n    key: '2',\n    label: renderTitle(<ReadOutlined style={{ color: '#1890FF' }} />, 'Design Guide'),\n    description: 'How to design a good product?',\n    children: [\n      {\n        key: '2-1',\n        icon: <HeartOutlined />,\n        description: `Know the well`,\n      },\n      {\n        key: '2-2',\n        icon: <SmileOutlined />,\n        description: `Set the AI role`,\n      },\n      {\n        key: '2-3',\n        icon: <CommentOutlined />,\n        description: `Express the feeling`,\n      },\n    ],\n  },\n];\n\nconst senderPromptsItems: GetProp<typeof Prompts, 'items'> = [\n  {\n    key: '1',\n    description: 'Hot Topics',\n    icon: <FireOutlined style={{ color: '#FF4D4F' }} />,\n  },\n  {\n    key: '2',\n    description: 'Design Guide',\n    icon: <ReadOutlined style={{ color: '#1890FF' }} />,\n  },\n];\n\nconst roles: GetProp<typeof Bubble.List, 'roles'> = {\n  ai: {\n    placement: 'start',\n    typing: { step: 5, interval: 20 },\n    styles: {\n      content: {\n        borderRadius: 16,\n      },\n    },\n  },\n  local: {\n    placement: 'end',\n    variant: 'shadow',\n  },\n};\n\nconst Independent: React.FC = () => {\n  // ==================== Style ====================\n  const { styles } = useStyle();\n\n  // ==================== State ====================\n  const [headerOpen, setHeaderOpen] = React.useState(false);\n\n  const [content, setContent] = React.useState('');\n\n  const [conversationsItems, setConversationsItems] = React.useState(defaultConversationsItems);\n\n  const [activeKey, setActiveKey] = React.useState(defaultConversationsItems[0].key);\n\n  const [attachedFiles, setAttachedFiles] = React.useState<GetProp<typeof Attachments, 'items'>>(\n    [],\n  );\n\n  // ==================== Runtime ====================\n  const [agent] = useXAgent({\n    request: async ({ message }, { onSuccess }) => {\n      onSuccess(`Mock success return. You said: ${message}`);\n    },\n  });\n\n  const { onRequest, messages, setMessages } = useXChat({\n    agent,\n  });\n\n  useEffect(() => {\n    if (activeKey !== undefined) {\n      setMessages([]);\n    }\n  }, [activeKey]);\n\n  // ==================== Event ====================\n  const onSubmit = (nextContent: string) => {\n    if (!nextContent) return;\n    onRequest(nextContent);\n    setContent('');\n  };\n\n  const onPromptsItemClick: GetProp<typeof Prompts, 'onItemClick'> = (info) => {\n    onRequest(info.data.description as string);\n  };\n\n  const onAddConversation = () => {\n    setConversationsItems([\n      ...conversationsItems,\n      {\n        key: `${conversationsItems.length}`,\n        label: `New Conversation ${conversationsItems.length}`,\n      },\n    ]);\n    setActiveKey(`${conversationsItems.length}`);\n  };\n\n  const onConversationClick: GetProp<typeof Conversations, 'onActiveChange'> = (key) => {\n    setActiveKey(key);\n  };\n\n  const handleFileChange: GetProp<typeof Attachments, 'onChange'> = (info) =>\n    setAttachedFiles(info.fileList);\n\n  // ==================== Nodes ====================\n  const placeholderNode = (\n    <Space direction=\"vertical\" size={16} className={styles.placeholder}>\n      <Welcome\n        variant=\"borderless\"\n        icon=\"https://mdn.alipayobjects.com/huamei_iwk9zp/afts/img/A*s5sNRo5LjfQAAAAAAAAAAAAADgCCAQ/fmt.webp\"\n        title=\"Hello, I'm Ant Design X\"\n        description=\"Base on Ant Design, AGI product interface solution, create a better intelligent vision~\"\n        extra={\n          <Space>\n            <Button icon={<ShareAltOutlined />} />\n            <Button icon={<EllipsisOutlined />} />\n          </Space>\n        }\n      />\n      <Prompts\n        title=\"Do you want?\"\n        items={placeholderPromptsItems}\n        styles={{\n          list: {\n            width: '100%',\n          },\n          item: {\n            flex: 1,\n          },\n        }}\n        onItemClick={onPromptsItemClick}\n      />\n    </Space>\n  );\n\n  const items: GetProp<typeof Bubble.List, 'items'> = messages.map(({ id, message, status }) => ({\n    key: id,\n    loading: status === 'loading',\n    role: status === 'local' ? 'local' : 'ai',\n    content: message,\n  }));\n\n  const attachmentsNode = (\n    <Badge dot={attachedFiles.length > 0 && !headerOpen}>\n      <Button type=\"text\" icon={<PaperClipOutlined />} onClick={() => setHeaderOpen(!headerOpen)} />\n    </Badge>\n  );\n\n  const senderHeader = (\n    <Sender.Header\n      title=\"Attachments\"\n      open={headerOpen}\n      onOpenChange={setHeaderOpen}\n      styles={{\n        content: {\n          padding: 0,\n        },\n      }}\n    >\n      <Attachments\n        beforeUpload={() => false}\n        items={attachedFiles}\n        onChange={handleFileChange}\n        placeholder={(type) =>\n          type === 'drop'\n            ? { title: 'Drop file here' }\n            : {\n                icon: <CloudUploadOutlined />,\n                title: 'Upload files',\n                description: 'Click or drag files to this area to upload',\n              }\n        }\n      />\n    </Sender.Header>\n  );\n\n  const logoNode = (\n    <div className={styles.logo}>\n      <img\n        src=\"https://mdn.alipayobjects.com/huamei_iwk9zp/afts/img/A*eco6RrQhxbMAAAAAAAAAAAAADgCCAQ/original\"\n        draggable={false}\n        alt=\"logo\"\n      />\n      <span>Ant Design X</span>\n    </div>\n  );\n\n  // ==================== Render =================\n  return (\n    <div className={styles.layout}>\n      <div className={styles.menu}>\n        {/* 🌟 Logo */}\n        {logoNode}\n        {/* 🌟 添加会话 */}\n        <Button\n          onClick={onAddConversation}\n          type=\"link\"\n          className={styles.addBtn}\n          icon={<PlusOutlined />}\n        >\n          New Conversation\n        </Button>\n        {/* 🌟 会话管理 */}\n        <Conversations\n          items={conversationsItems}\n          className={styles.conversations}\n          activeKey={activeKey}\n          onActiveChange={onConversationClick}\n        />\n      </div>\n      <div className={styles.chat}>\n        {/* 🌟 消息列表 */}\n        <Bubble.List\n          items={items.length > 0 ? items : [{ content: placeholderNode, variant: 'borderless' }]}\n          roles={roles}\n          className={styles.messages}\n        />\n        {/* 🌟 提示词 */}\n        <Prompts items={senderPromptsItems} onItemClick={onPromptsItemClick} />\n        {/* 🌟 输入框 */}\n        <Sender\n          value={content}\n          header={senderHeader}\n          onSubmit={onSubmit}\n          onChange={setContent}\n          prefix={attachmentsNode}\n          loading={agent.isRequesting()}\n          className={styles.sender}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Independent;\n","import '/home/runner/work/x/x/components/x-stream/demo/default-protocol.tsx?watch=parent';import { TagsOutlined } from '@ant-design/icons';\nimport { Bubble, ThoughtChain, XStream } from '@ant-design/x';\nimport { Button, Splitter } from 'antd';\nimport React from 'react';\n\nconst contentChunks = ['He', 'llo', ', w', 'or', 'ld!'];\n\nfunction mockReadableStream() {\n  const sseChunks: string[] = [];\n\n  for (let i = 0; i < contentChunks.length; i++) {\n    const sseEventPart = `event: message\\ndata: {\"id\":\"${i}\",\"content\":\"${contentChunks[i]}\"}\\n\\n`;\n    sseChunks.push(sseEventPart);\n  }\n\n  return new ReadableStream({\n    async start(controller) {\n      for (const chunk of sseChunks) {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        controller.enqueue(new TextEncoder().encode(chunk));\n      }\n      controller.close();\n    },\n  });\n}\n\nconst App = () => {\n  const [lines, setLines] = React.useState<Record<string, string>[]>([]);\n  const content = lines.map((line) => JSON.parse(line.data).content).join('');\n\n  async function readStream() {\n    // 🌟 Read the stream\n    for await (const chunk of XStream({\n      readableStream: mockReadableStream(),\n    })) {\n      console.log(chunk);\n      setLines((pre) => [...pre, chunk]);\n    }\n  }\n\n  return (\n    <Splitter>\n      <Splitter.Panel>\n        {/* -------------- Emit -------------- */}\n        <Button type=\"primary\" onClick={readStream} style={{ marginBottom: 16 }}>\n          Mock Default Protocol - SSE\n        </Button>\n        {/* -------------- Content Concat -------------- */}\n        {content && <Bubble content={content} />}\n      </Splitter.Panel>\n      {/* -------------- Log -------------- */}\n      <Splitter.Panel style={{ marginLeft: 16 }}>\n        <ThoughtChain\n          items={\n            lines.length\n              ? [\n                  {\n                    title: 'Mock Default Protocol - Log',\n                    status: 'success',\n                    icon: <TagsOutlined />,\n                    content: (\n                      <pre style={{ overflow: 'scroll' }}>\n                        {lines.map((i) => (\n                          <code key={i.data}>{i.data}</code>\n                        ))}\n                      </pre>\n                    ),\n                  },\n                ]\n              : []\n          }\n        />\n      </Splitter.Panel>\n    </Splitter>\n  );\n};\n\nexport default App;\n","import '/home/runner/work/x/x/components/use-x-agent/demo/preset.tsx?watch=parent';import { LoadingOutlined, TagsOutlined } from '@ant-design/icons';\nimport { ThoughtChain, useXAgent } from '@ant-design/x';\nimport { Button, Descriptions, Splitter } from 'antd';\nimport React from 'react';\n\nimport type { ThoughtChainItem } from '@ant-design/x';\n\n/**\n * 🔔 Please replace the BASE_URL, PATH, MODEL, API_KEY with your own values.\n */\nconst BASE_URL = 'https://api.example.com';\nconst PATH = '/chat';\nconst MODEL = 'gpt-3.5-turbo';\n/** 🔥🔥 Its dangerously! */\n// const API_KEY = '';\n\ninterface YourMessageType {\n  role: string;\n  content: string;\n}\n\nconst App = () => {\n  const [status, setStatus] = React.useState<ThoughtChainItem['status']>();\n  const [lines, setLines] = React.useState<any[]>([]);\n\n  const [agent] = useXAgent<YourMessageType>({\n    baseURL: BASE_URL + PATH,\n    model: MODEL,\n    // dangerouslyApiKey: API_KEY\n  });\n\n  async function request() {\n    setStatus('pending');\n\n    agent.request(\n      {\n        messages: [{ role: 'user', content: 'hello, who are u?' }],\n        stream: true,\n      },\n      {\n        onSuccess: (messages) => {\n          setStatus('success');\n          console.log('onSuccess', messages);\n        },\n        onError: (error) => {\n          setStatus('error');\n          console.error('onError', error);\n        },\n        onUpdate: (msg) => {\n          setLines((pre) => [...pre, msg]);\n          console.log('onUpdate', msg);\n        },\n      },\n    );\n  }\n\n  return (\n    <Splitter>\n      <Splitter.Panel>\n        <Button type=\"primary\" disabled={status === 'pending'} onClick={request}>\n          Agent Request\n        </Button>\n      </Splitter.Panel>\n      <Splitter.Panel>\n        <ThoughtChain\n          style={{ marginLeft: 16 }}\n          items={[\n            {\n              title: 'Agent Request Log',\n              status: status,\n              icon: status === 'pending' ? <LoadingOutlined /> : <TagsOutlined />,\n              description:\n                status === 'error' &&\n                agent.config.baseURL === BASE_URL + PATH &&\n                'Please replace the BASE_URL, PATH, MODEL, API_KEY with your own values.',\n              content: (\n                <Descriptions column={1}>\n                  <Descriptions.Item label=\"Status\">{status || '-'}</Descriptions.Item>\n                  <Descriptions.Item label=\"Update Times\">{lines.length}</Descriptions.Item>\n                </Descriptions>\n              ),\n            },\n          ]}\n        />\n      </Splitter.Panel>\n    </Splitter>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"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"}