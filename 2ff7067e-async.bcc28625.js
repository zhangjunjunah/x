(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]||[]).push([["2ff7067e"],{"2ff7067e":function(a,e,n){"use strict";n.d(e,"__esModule",{value:!0}),n.d(e,"texts",{enumerable:!0,get:function(){return t;}}),n("e8a43618");let t=[{value:"Transform SSE protocol ",paraId:0,tocIndex:0},{value:"ReadableStream",paraId:0,tocIndex:0},{value:" to ",paraId:0,tocIndex:0},{value:"Record",paraId:0,tocIndex:0},{value:"Decode and read any protocol ",paraId:0,tocIndex:0},{value:"ReadableStream",paraId:0,tocIndex:0},{value:"Common ",paraId:1,tocIndex:1},{value:"ReadableStream",paraId:1,tocIndex:1},{value:" instances, such as ",paraId:1,tocIndex:1},{value:"await fetch(...).body",paraId:1,tocIndex:1},{value:", usage example:",paraId:1,tocIndex:1},{value:"import { XStream } from '@ant-design/x';\n\nasync function request() {\n  const response = await fetch();\n  // .....\n\n  for await (const chunk of XStream({\n    readableStream: response.body,\n  })) {\n    console.log(chunk);\n  }\n}\n",paraId:2,tocIndex:1},{value:" ",paraId:3},{value:"Property",paraId:4,tocIndex:6},{value:"Description",paraId:4,tocIndex:6},{value:"Type",paraId:4,tocIndex:6},{value:"Default",paraId:4,tocIndex:6},{value:"Version",paraId:4,tocIndex:6},{value:"readableStream",paraId:4,tocIndex:6},{value:"Readable stream of binary data",paraId:4,tocIndex:6},{value:"ReadableStream<'Uint8Array'>",paraId:4,tocIndex:6},{value:"-",paraId:4,tocIndex:6},{value:"-",paraId:4,tocIndex:6},{value:"transformStream",paraId:4,tocIndex:6},{value:"Support customizable transformStream to transform streams",paraId:4,tocIndex:6},{value:"TransformStream<string, T>",paraId:4,tocIndex:6},{value:"sseTransformStream",paraId:4,tocIndex:6},{value:"-",paraId:4,tocIndex:6}];}}]);
//# sourceMappingURL=2ff7067e-async.bcc28625.js.map