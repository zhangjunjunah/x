(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]||[]).push([["0f195bb8"],{"0f195bb8":function(e,n,s){"use strict";s.d(n,"__esModule",{value:!0}),s.d(n,"texts",{enumerable:!0,get:function(){return t;}}),s("4b35e67e");let t=[{value:"This guide will introduce how to integrate the model service provided by Qwen into an application built with Ant Design X.",paraId:0},{value:'Qwen\u2019s model inference service supports the "OpenAI Compatibility Mode." For more details, see the official documentation: ',paraId:1},{value:"Alibaba Cloud - Tongyi Qianwen",paraId:1},{value:"How to get the baseURL - ",paraId:2},{value:"https://help.aliyun.com/zh/model-studio/getting-started/what-is-model-studio",paraId:2},{value:"How to get the API Key - ",paraId:2},{value:"https://help.aliyun.com/zh/model-studio/developer-reference/get-api-key",paraId:2},{value:"Model list - ",paraId:2},{value:"https://help.aliyun.com/zh/model-studio/getting-started/models",paraId:2},{value:"It refers to model inference services whose API design and usage methods are consistent with OpenAI\u2019s API.",paraId:3,tocIndex:0},{value:"This allows developers to use the same code and methods as OpenAI models to call these compatible services, thus reducing integration costs.",paraId:4,tocIndex:0},{value:"Note: \u{1F525} ",paraId:5,tocIndex:1},{value:"dangerouslyAllowBrowser",paraId:5,tocIndex:1},{value:" presents security risks. Detailed documentation on this can be found in the official ",paraId:5,tocIndex:1},{value:"openai-node documentation",paraId:5,tocIndex:1},{value:".",paraId:5,tocIndex:1},{value:"import { useXAgent, useXChat, Sender, Bubble } from '@ant-design/x';\nimport OpenAI from 'openai';\nimport React from 'react';\n\nconst client = new OpenAI({\n  baseURL: 'https://dashscope.aliyuncs.com/compatible-mode/v1',\n  apiKey: process.env['DASHSCOPE_API_KEY'],\n  dangerouslyAllowBrowser: true,\n});\n\nconst Demo: React.FC = () => {\n  const [agent] = useXAgent({\n    request: async (info, callbacks) => {\n      const { messages, message } = info;\n\n      const { onSuccess, onUpdate, onError } = callbacks;\n\n      // current message\n      console.log('message', message);\n\n      // history messages\n      console.log('messages', messages);\n\n      let content: string = '';\n\n      try {\n        const stream = await client.chat.completions.create({\n          model: 'qwen-plus',\n          // if chat context is needed, modify the array\n          messages: [{ role: 'user', content: message }],\n          // stream mode\n          stream: true,\n        });\n\n        for await (const chunk of stream) {\n          content += chunk.choices[0]?.delta?.content || '';\n\n          onUpdate(content);\n        }\n\n        onSuccess(content);\n      } catch (error) {\n        // handle error\n        // onError();\n      }\n    },\n  });\n\n  const {\n    // use to send message\n    onRequest,\n    // use to render messages\n    messages,\n  } = useXChat({ agent });\n\n  const items = messages.map(({ message, id }) => ({\n    // key is required, used to identify the message\n    key: id,\n    content: message,\n  }));\n\n  return (\n    <div>\n      <Bubble.List items={items} />\n      <Sender onSubmit={onRequest} />\n    </div>\n  );\n};\n\nexport default Demo;\n",paraId:6,tocIndex:1},{value:"Note: \u{1F525} ",paraId:7,tocIndex:2},{value:"dangerouslyApiKey",paraId:7,tocIndex:2},{value:" presents security risks. Detailed documentation on this can be found in ",paraId:7,tocIndex:2},{value:"Explanation",paraId:8,tocIndex:2},{value:".",paraId:7,tocIndex:2},{value:"import { useXAgent, useXChat, Sender, Bubble, XRequest } from '@ant-design/x';\nimport React from 'react';\n\nconst { create } = XRequest({\n  baseURL: 'https://dashscope.aliyuncs.com/compatible-mode/v1',\n  dangerouslyApiKey: process.env['DASHSCOPE_API_KEY'],\n  model: 'qwen-plus',\n});\n\nconst Component: React.FC = () => {\n  const [agent] = useXAgent({\n    request: async (info, callbacks) => {\n      const { messages, message } = info;\n      const { onUpdate } = callbacks;\n\n      // current message\n      console.log('message', message);\n      // messages list\n      console.log('messages', messages);\n\n      let content: string = '';\n\n      try {\n        create(\n          {\n            messages: [{ role: 'user', content: message }],\n            stream: true,\n          },\n          {\n            onSuccess: (chunks) => {\n              console.log('sse chunk list', chunks);\n            },\n            onError: (error) => {\n              console.log('error', error);\n            },\n            onUpdate: (chunk) => {\n              console.log('sse object', chunk);\n\n              const data = JSON.parse(chunk.data);\n\n              content += data?.choices[0].delta.content;\n\n              onUpdate(content);\n            },\n          },\n        );\n      } catch (error) {}\n    },\n  });\n\n  const {\n    // use to send message\n    onRequest,\n    // use to render messages\n    messages,\n  } = useXChat({ agent });\n\n  const items = messages.map(({ message, id }) => ({\n    // key is required, used to identify the message\n    key: id,\n    content: message,\n  }));\n\n  return (\n    <div>\n      <Bubble.List items={items} />\n      <Sender onSubmit={onRequest} />\n    </div>\n  );\n};\n\nexport default Component;\n",paraId:9,tocIndex:2}];}}]);
//# sourceMappingURL=0f195bb8-async.c63addb0.js.map