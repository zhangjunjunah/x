{"version":3,"sources":[".dumi/theme/slots/Content/DocMeta.tsx"],"sourcesContent":["import React, { useLayoutEffect, useMemo, useState } from 'react';\nimport { CalendarOutlined } from '@ant-design/icons';\nimport { Avatar, Flex, Skeleton, Typography } from 'antd';\nimport DayJS from 'dayjs';\nimport { useRouteMeta } from 'dumi';\n\ninterface AuthorAvatarPoprs {\n  name: string;\n  avatar: string;\n}\n\nconst AuthorAvatar: React.FC<AuthorAvatarPoprs> = ({ name, avatar }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useLayoutEffect(() => {\n    const img = new Image();\n    img.src = avatar;\n    img.onload = () => setLoading(false);\n    img.onerror = () => setError(true);\n  }, []);\n  if (error) {\n    return null;\n  }\n  if (loading) {\n    return <Skeleton.Avatar size=\"small\" active />;\n  }\n  return (\n    <Avatar size=\"small\" src={avatar} alt={name}>\n      {name}\n    </Avatar>\n  );\n};\n\nconst DocMeta: React.FC = () => {\n  const meta = useRouteMeta();\n\n  const mergedAuthorInfos = useMemo(() => {\n    const { author } = meta.frontmatter;\n    if (!author) {\n      return [];\n    }\n    if (typeof author === 'string') {\n      return author.split(',').map((item) => ({\n        name: item,\n        avatar: `https://github.com/${item}.png`,\n      }));\n    }\n    if (Array.isArray(author)) {\n      return author;\n    }\n    return [];\n  }, [meta.frontmatter.author]);\n\n  if (!meta.frontmatter.date && !meta.frontmatter.author) {\n    return null;\n  }\n\n  return (\n    <Typography.Paragraph>\n      <Flex gap=\"small\">\n        {meta.frontmatter.date && (\n          <span style={{ opacity: 0.65 }}>\n            <CalendarOutlined /> {DayJS(meta.frontmatter.date).format('YYYY-MM-DD')}\n          </span>\n        )}\n        {mergedAuthorInfos.map<React.ReactNode>((info) => (\n          <a\n            href={`https://github.com/${info.name}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            key={info.name}\n          >\n            <Flex gap={4}>\n              <AuthorAvatar name={info.name} avatar={info.avatar} />\n              <span style={{ opacity: 0.65 }}>@{info.name}</span>\n            </Flex>\n          </a>\n        ))}\n      </Flex>\n    </Typography.Paragraph>\n  );\n};\n\nexport default DocMeta;\n"],"names":[],"mappings":"+PAmFA,+CAAA,8CAnF0D,gBACzB,gBACkB,oBACjC,iBACW,YAO7B,IAAM,EAA4C,CAAC,CAAE,KAAA,CAAI,CAAE,OAAA,CAAM,CAAE,IACjE,GAAM,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAC,CAAA,GACjC,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAC,CAAA,SAOnC,CANA,GAAA,iBAAe,EAAC,KACd,IAAM,EAAM,IAAI,MAChB,EAAI,GAAG,CAAG,EACV,EAAI,MAAM,CAAG,IAAM,EAAW,CAAA,GAC9B,EAAI,OAAO,CAAG,IAAM,EAAS,CAAA,GAC/B,EAAG,EAAE,EACD,GACK,KAEL,EACK,UAAC,UAAQ,CAAC,MAAM,EAAC,KAAK,QAAQ,MAAM,MAG3C,UAAC,QAAM,EAAC,KAAK,QAAQ,IAAK,EAAQ,IAAK,WACpC,IAGP,MAoDA,EAlD0B,KACxB,IAAM,EAAO,GAAA,cAAY,IAEnB,EAAoB,GAAA,SAAO,EAAC,KAChC,GAAM,CAAE,OAAA,CAAM,CAAE,CAAG,EAAK,WAAW,QACnC,AAAK,EAGD,AAAkB,UAAlB,OAAO,EACF,EAAO,KAAK,CAAC,KAAK,GAAG,CAAC,AAAC,GAAU,CAAA,CACtC,KAAM,EACN,OAAQ,CAAC,mBAAmB,EAAE,EAAK,IAAI,CAAC,AAC1C,CAAA,GAEE,MAAM,OAAO,CAAC,GACT,EAEF,EAAE,CAXA,EAAE,CAYb,EAAG,CAAC,EAAK,WAAW,CAAC,MAAM,CAAC,SAE5B,AAAI,AAAC,EAAK,WAAW,CAAC,IAAI,EAAK,EAAK,WAAW,CAAC,MAAM,CAKpD,UAAC,YAAU,CAAC,SAAS,WACnB,WAAC,MAAI,EAAC,IAAI,kBACP,EAAK,WAAW,CAAC,IAAI,EACpB,WAAC,QAAK,MAAO,CAAE,QAAS,GAAK,YAC3B,UAAC,kBAAgB,KAAG,IAAE,GAAA,SAAK,EAAC,EAAK,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,iBAG7D,EAAkB,GAAG,CAAkB,AAAC,GACvC,UAAC,KACC,KAAM,CAAC,mBAAmB,EAAE,EAAK,IAAI,CAAC,CAAC,CACvC,OAAO,SACP,IAAI,+BAGJ,WAAC,MAAI,EAAC,IAAK,YACT,UAAC,GAAa,KAAM,EAAK,IAAI,CAAE,OAAQ,EAAK,MAAM,GAClD,WAAC,QAAK,MAAO,CAAE,QAAS,GAAK,YAAG,IAAE,EAAK,IAAI,QAJxC,EAAK,IAAI,QAhBf,KA2BX"}