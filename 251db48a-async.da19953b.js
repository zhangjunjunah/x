(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]||[]).push([["251db48a"],{"251db48a":function(e,n,s){"use strict";s.d(n,"__esModule",{value:!0}),s.d(n,"texts",{enumerable:!0,get:function(){return t;}}),s("134501d0");let t=[{value:"\u8FD9\u7BC7\u6307\u5357\u5C06\u4ECB\u7ECD\u5982\u4F55\u5728\u4F7F\u7528 Ant Design X \u642D\u5EFA\u7684\u5E94\u7528\u4E2D\u63A5\u5165 Qwen \u63D0\u4F9B\u7684\u6A21\u578B\u670D\u52A1\u3002",paraId:0},{value:"Qwen \u7684\u6A21\u578B\u63A8\u7406\u670D\u52A1\u652F\u6301\u300C\u517C\u5BB9 OpenAI \u6A21\u5F0F\u300D\u3002\u8BE6\u89C1\u5B98\u65B9\u6587\u6863: ",paraId:1},{value:"\u963F\u91CC\u4E91 - \u901A\u4E49\u5343\u95EE",paraId:1},{value:"\u5982\u4F55\u83B7\u53D6 baseURL - ",paraId:2,tocIndex:0},{value:"https://help.aliyun.com/zh/model-studio/getting-started/what-is-model-studio",paraId:2,tocIndex:0},{value:"\u5982\u4F55\u83B7\u53D6 API Key - ",paraId:2,tocIndex:0},{value:"https://help.aliyun.com/zh/model-studio/developer-reference/get-api-key",paraId:2,tocIndex:0},{value:"\u6A21\u578B\u5217\u8868 - ",paraId:2,tocIndex:0},{value:"https://help.aliyun.com/zh/model-studio/getting-started/models",paraId:2,tocIndex:0},{value:"\u662F\u6307\u5728\u63A5\u53E3\u8BBE\u8BA1\u548C\u4F7F\u7528\u65B9\u5F0F\u4E0A\u4E0E OpenAI \u7684 API \u4FDD\u6301\u4E00\u81F4\u7684\u6A21\u578B\u63A8\u7406\u670D\u52A1\u3002",paraId:3,tocIndex:1},{value:"\u8FD9\u610F\u5473\u7740\u5F00\u53D1\u8005\u53EF\u4EE5\u4F7F\u7528\u4E0E\u8C03\u7528 OpenAI \u6A21\u578B\u76F8\u540C\u7684\u4EE3\u7801\u548C\u65B9\u6CD5\uFF0C\u6765\u8C03\u7528\u8FD9\u4E9B\u517C\u5BB9\u670D\u52A1\uFF0C\u4ECE\u800C\u51CF\u5C11\u5F00\u53D1\u63A5\u5165\u6210\u672C\u3002",paraId:4,tocIndex:1},{value:"\u6CE8\u610F: \u{1F525} ",paraId:5,tocIndex:2},{value:"dangerouslyAllowBrowser",paraId:5,tocIndex:2},{value:" \u5B58\u5728\u5B89\u5168\u98CE\u9669\uFF0C\u5BF9\u6B64 openai-node \u7684\u5B98\u65B9\u6587\u6863\u6709\u8BE6\u7EC6\u7684",paraId:5,tocIndex:2},{value:"\u8BF4\u660E",paraId:5,tocIndex:2},{value:"\u3002",paraId:5,tocIndex:2},{value:"import { useXAgent, useXChat, Sender, Bubble } from '@ant-design/x';\nimport OpenAI from 'openai';\nimport React from 'react';\n\nconst client = new OpenAI({\n  baseURL: 'https://dashscope.aliyuncs.com/compatible-mode/v1',\n  apiKey: process.env['DASHSCOPE_API_KEY'],\n  dangerouslyAllowBrowser: true,\n});\n\nconst Demo: React.FC = () => {\n  const [agent] = useXAgent({\n    request: async (info, callbacks) => {\n      const { messages, message } = info;\n\n      const { onSuccess, onUpdate, onError } = callbacks;\n\n      // current message\n      console.log('message', message);\n\n      // history messages\n      console.log('messages', messages);\n\n      let content: string = '';\n\n      try {\n        const stream = await client.chat.completions.create({\n          model: 'qwen-plus',\n          // if chat context is needed, modify the array\n          messages: [{ role: 'user', content: message }],\n          // stream mode\n          stream: true,\n        });\n\n        for await (const chunk of stream) {\n          content += chunk.choices[0]?.delta?.content || '';\n\n          onUpdate(content);\n        }\n\n        onSuccess(content);\n      } catch (error) {\n        // handle error\n        // onError();\n      }\n    },\n  });\n\n  const {\n    // use to send message\n    onRequest,\n    // use to render messages\n    messages,\n  } = useXChat({ agent });\n\n  const items = messages.map(({ message, id }) => ({\n    // key is required, used to identify the message\n    key: id,\n    content: message,\n  }));\n\n  return (\n    <div>\n      <Bubble.List items={items} />\n      <Sender onSubmit={onRequest} />\n    </div>\n  );\n};\n\nexport default Demo;\n",paraId:6,tocIndex:2},{value:"\u6CE8\u610F: \u{1F525} ",paraId:7,tocIndex:3},{value:"dangerouslyApiKey",paraId:7,tocIndex:3},{value:" \u5B58\u5728\u5B89\u5168\u98CE\u9669\uFF0C\u5BF9\u6B64\u6709\u8BE6\u7EC6\u7684",paraId:7,tocIndex:3},{value:"\u8BF4\u660E",paraId:8,tocIndex:3},{value:"\u3002",paraId:7,tocIndex:3},{value:"import { useXAgent, useXChat, Sender, Bubble, XRequest } from '@ant-design/x';\nimport React from 'react';\n\nconst { create } = XRequest({\n  baseURL: 'https://dashscope.aliyuncs.com/compatible-mode/v1',\n  dangerouslyApiKey: process.env['DASHSCOPE_API_KEY'],\n  model: 'qwen-plus',\n});\n\nconst Component: React.FC = () => {\n  const [agent] = useXAgent({\n    request: async (info, callbacks) => {\n      const { messages, message } = info;\n      const { onUpdate } = callbacks;\n\n      // current message\n      console.log('message', message);\n      // messages list\n      console.log('messages', messages);\n\n      let content: string = '';\n\n      try {\n        create(\n          {\n            messages: [{ role: 'user', content: message }],\n            stream: true,\n          },\n          {\n            onSuccess: (chunks) => {\n              console.log('sse chunk list', chunks);\n            },\n            onError: (error) => {\n              console.log('error', error);\n            },\n            onUpdate: (chunk) => {\n              console.log('sse object', chunk);\n\n              const data = JSON.parse(chunk.data);\n\n              content += data?.choices[0].delta.content;\n\n              onUpdate(content);\n            },\n          },\n        );\n      } catch (error) {}\n    },\n  });\n\n  const {\n    // use to send message\n    onRequest,\n    // use to render messages\n    messages,\n  } = useXChat({ agent });\n\n  const items = messages.map(({ message, id }) => ({\n    // key is required, used to identify the message\n    key: id,\n    content: message,\n  }));\n\n  return (\n    <div>\n      <Bubble.List items={items} />\n      <Sender onSubmit={onRequest} />\n    </div>\n  );\n};\n\nexport default Component;\n",paraId:9,tocIndex:3}];}}]);
//# sourceMappingURL=251db48a-async.da19953b.js.map